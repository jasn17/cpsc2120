/*
 * Name: Jason Lin 
 * Date Submitted: 01/31/2024
 * Lab Section: 005
 * Assignment Name: Intro to Postfix
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

bool isOperator(const string & in) {
	return in == "+" || in == "-" || in == "*" || in == "/" || in == "%";
}

int getPrecedence(const string & in) {
	if (in == "+" || in == "-") { return 1; }
	if (in == "*" || in == "%" || in == "/") { return 2; }
	return 0;
}
int infixToPostfix(string infix[], int length, string postfix[])
{	
	// Making sure the parentheses are aligned by the following algorithm;
	// 	If '(' detected increment the count of '('
	// 	If ')' is detected decrement the count of ')'
	// 	If count goes under zero at any point of the code, that means there is a parentheses missmatch
	// 	When finished iterating, if paraCount != 0, return 0, else proceed with code
	int paraCount = 0;
	for (int i = 0; i < length; i++) {
		if (paraCount < 0) {
			return 0;
		}
		else if (infix[i] == "(") {
			paraCount++;
		}
		else if (infix[i] == ")") {
			paraCount--;
		}
	}
	if (paraCount != 0) { return 0; }

	// Create the stack data structure	
	stack<string> operatorStack;
	// Keeps track of the index of the postfix array 
	int index = 0;
	
	// Loop through the infix array 
	for (int i = 0; i < length; i++) {
		// If a operand is encountered, add it to the postfix array
		if (isalnum(infix[i][0])) {
			postfix[index++] = infix[i];	
		}
	       	// If an opening parentheses is read, push it to the operator stack 	
		else if (infix[i] == "(") {
			operatorStack.push(infix[i]);
			
		}
	       // If a closing parentheses is read, add the operators from stack into postfix array until a opening parentheses has been reached or the end of the stack has been reached
	       // Push the infix value into the stack
	       // Pop the opening parentheses from stack
		else if (infix[i] == ")") {
			while(!operatorStack.empty() && operatorStack.top() != "(") {
				postfix[index++] = operatorStack.top();
				operatorStack.pop();
			}
			// Pop the "(" 
			operatorStack.pop();

		} 
		// If a operand is encountered, pop values from the stack while the operand from the stack has a higher or equal precedence than the infix value
		// Push the infix value to the stack 
		else if (isOperator(infix[i])) {
			while (!operatorStack.empty() && getPrecedence(operatorStack.top()) >= getPrecedence(infix[i])) {
				postfix[index++] = operatorStack.top();
				operatorStack.pop();
			}
			operatorStack.push(infix[i]);
		}
	}
	
	// Loop finishes executing, add the remaining content from the stack to the postfix array 
	while(!operatorStack.empty()) {
		postfix[index++] = operatorStack.top();
		operatorStack.pop();
	}	

	return index;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
/*int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}*/

